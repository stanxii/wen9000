// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stan.wen9000.domain;

import com.stan.wen9000.domain.Cbatinfo;
import com.stan.wen9000.domain.CbatinfoDataOnDemand;
import com.stan.wen9000.domain.CbatinfoRepository;
import com.stan.wen9000.service.CbatinfoService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CbatinfoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CbatinfoDataOnDemand: @Component;
    
    private Random CbatinfoDataOnDemand.rnd = new SecureRandom();
    
    private List<Cbatinfo> CbatinfoDataOnDemand.data;
    
    @Autowired
    CbatinfoService CbatinfoDataOnDemand.cbatinfoService;
    
    @Autowired
    CbatinfoRepository CbatinfoDataOnDemand.cbatinfoRepository;
    
    public Cbatinfo CbatinfoDataOnDemand.getNewTransientCbatinfo(int index) {
        Cbatinfo obj = new Cbatinfo();
        setAddress(obj, index);
        setAgentPort(obj, index);
        setAppVer(obj, index);
        setBootVer(obj, index);
        setContact(obj, index);
        setLabel(obj, index);
        setMvId(obj, index);
        setMvStatus(obj, index);
        setPhone(obj, index);
        return obj;
    }
    
    public void CbatinfoDataOnDemand.setAddress(Cbatinfo obj, int index) {
        String address = "address_" + index;
        obj.setAddress(address);
    }
    
    public void CbatinfoDataOnDemand.setAgentPort(Cbatinfo obj, int index) {
        Integer agentPort = new Integer(index);
        obj.setAgentPort(agentPort);
    }
    
    public void CbatinfoDataOnDemand.setAppVer(Cbatinfo obj, int index) {
        String appVer = "appVer_" + index;
        obj.setAppVer(appVer);
    }
    
    public void CbatinfoDataOnDemand.setBootVer(Cbatinfo obj, int index) {
        String bootVer = "bootVer_" + index;
        obj.setBootVer(bootVer);
    }
    
    public void CbatinfoDataOnDemand.setContact(Cbatinfo obj, int index) {
        String contact = "contact_" + index;
        obj.setContact(contact);
    }
    
    public void CbatinfoDataOnDemand.setLabel(Cbatinfo obj, int index) {
        String label = "label_" + index;
        obj.setLabel(label);
    }
    
    public void CbatinfoDataOnDemand.setMvId(Cbatinfo obj, int index) {
        Long mvId = new Integer(index).longValue();
        obj.setMvId(mvId);
    }
    
    public void CbatinfoDataOnDemand.setMvStatus(Cbatinfo obj, int index) {
        Boolean mvStatus = Boolean.TRUE;
        obj.setMvStatus(mvStatus);
    }
    
    public void CbatinfoDataOnDemand.setPhone(Cbatinfo obj, int index) {
        String phone = "phone_" + index;
        obj.setPhone(phone);
    }
    
    public Cbatinfo CbatinfoDataOnDemand.getSpecificCbatinfo(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Cbatinfo obj = data.get(index);
        Long id = obj.getId();
        return cbatinfoService.findCbatinfo(id);
    }
    
    public Cbatinfo CbatinfoDataOnDemand.getRandomCbatinfo() {
        init();
        Cbatinfo obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return cbatinfoService.findCbatinfo(id);
    }
    
    public boolean CbatinfoDataOnDemand.modifyCbatinfo(Cbatinfo obj) {
        return false;
    }
    
    public void CbatinfoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = cbatinfoService.findCbatinfoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Cbatinfo' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Cbatinfo>();
        for (int i = 0; i < 10; i++) {
            Cbatinfo obj = getNewTransientCbatinfo(i);
            try {
                cbatinfoService.saveCbatinfo(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            cbatinfoRepository.flush();
            data.add(obj);
        }
    }
    
}
