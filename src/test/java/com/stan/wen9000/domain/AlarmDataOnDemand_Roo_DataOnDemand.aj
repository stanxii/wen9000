// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stan.wen9000.domain;

import com.stan.wen9000.domain.Alarm;
import com.stan.wen9000.domain.AlarmDataOnDemand;
import com.stan.wen9000.domain.AlarmRepository;
import com.stan.wen9000.service.AlarmService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AlarmDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AlarmDataOnDemand: @Component;
    
    private Random AlarmDataOnDemand.rnd = new SecureRandom();
    
    private List<Alarm> AlarmDataOnDemand.data;
    
    @Autowired
    AlarmService AlarmDataOnDemand.alarmService;
    
    @Autowired
    AlarmRepository AlarmDataOnDemand.alarmRepository;
    
    public Alarm AlarmDataOnDemand.getNewTransientAlarm(int index) {
        Alarm obj = new Alarm();
        setAlarmcode(obj, index);
        setAlarmlevel(obj, index);
        setAlarmtype(obj, index);
        setAlarmvalue(obj, index);
        setCbatip(obj, index);
        setCbatmac(obj, index);
        setCltindex(obj, index);
        setCnuindex(obj, index);
        setCnumac(obj, index);
        setItemnumber(obj, index);
        setOid(obj, index);
        setRealtime(obj, index);
        setTimeticks(obj, index);
        setTrapinfo(obj, index);
        return obj;
    }
    
    public void AlarmDataOnDemand.setAlarmcode(Alarm obj, int index) {
        Integer alarmcode = new Integer(index);
        obj.setAlarmcode(alarmcode);
    }
    
    public void AlarmDataOnDemand.setAlarmlevel(Alarm obj, int index) {
        Integer alarmlevel = new Integer(index);
        obj.setAlarmlevel(alarmlevel);
    }
    
    public void AlarmDataOnDemand.setAlarmtype(Alarm obj, int index) {
        Integer alarmtype = new Integer(index);
        obj.setAlarmtype(alarmtype);
    }
    
    public void AlarmDataOnDemand.setAlarmvalue(Alarm obj, int index) {
        Integer alarmvalue = new Integer(index);
        obj.setAlarmvalue(alarmvalue);
    }
    
    public void AlarmDataOnDemand.setCbatip(Alarm obj, int index) {
        String cbatip = "cbatip_" + index;
        obj.setCbatip(cbatip);
    }
    
    public void AlarmDataOnDemand.setCbatmac(Alarm obj, int index) {
        String cbatmac = "cbatmac_" + index;
        obj.setCbatmac(cbatmac);
    }
    
    public void AlarmDataOnDemand.setCltindex(Alarm obj, int index) {
        Integer cltindex = new Integer(index);
        obj.setCltindex(cltindex);
    }
    
    public void AlarmDataOnDemand.setCnuindex(Alarm obj, int index) {
        Integer cnuindex = new Integer(index);
        obj.setCnuindex(cnuindex);
    }
    
    public void AlarmDataOnDemand.setCnumac(Alarm obj, int index) {
        String cnumac = "cnumac_" + index;
        obj.setCnumac(cnumac);
    }
    
    public void AlarmDataOnDemand.setItemnumber(Alarm obj, int index) {
        Integer itemnumber = new Integer(index);
        obj.setItemnumber(itemnumber);
    }
    
    public void AlarmDataOnDemand.setOid(Alarm obj, int index) {
        String oid = "oid_" + index;
        obj.setOid(oid);
    }
    
    public void AlarmDataOnDemand.setRealtime(Alarm obj, int index) {
        Date realtime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRealtime(realtime);
    }
    
    public void AlarmDataOnDemand.setTimeticks(Alarm obj, int index) {
        String timeticks = "timeticks_" + index;
        obj.setTimeticks(timeticks);
    }
    
    public void AlarmDataOnDemand.setTrapinfo(Alarm obj, int index) {
        String trapinfo = "trapinfo_" + index;
        obj.setTrapinfo(trapinfo);
    }
    
    public Alarm AlarmDataOnDemand.getSpecificAlarm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Alarm obj = data.get(index);
        Long id = obj.getId();
        return alarmService.findAlarm(id);
    }
    
    public Alarm AlarmDataOnDemand.getRandomAlarm() {
        init();
        Alarm obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return alarmService.findAlarm(id);
    }
    
    public boolean AlarmDataOnDemand.modifyAlarm(Alarm obj) {
        return false;
    }
    
    public void AlarmDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = alarmService.findAlarmEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Alarm' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Alarm>();
        for (int i = 0; i < 10; i++) {
            Alarm obj = getNewTransientAlarm(i);
            try {
                alarmService.saveAlarm(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            alarmRepository.flush();
            data.add(obj);
        }
    }
    
}
