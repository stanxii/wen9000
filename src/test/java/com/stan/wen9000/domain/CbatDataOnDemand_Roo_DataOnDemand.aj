// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stan.wen9000.domain;

import com.stan.wen9000.domain.Cbat;
import com.stan.wen9000.domain.CbatDataOnDemand;
import com.stan.wen9000.domain.CbatRepository;
import com.stan.wen9000.domain.Cbatinfo;
import com.stan.wen9000.domain.CbatinfoDataOnDemand;
import com.stan.wen9000.reference.EocDeviceType;
import com.stan.wen9000.service.CbatService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CbatDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CbatDataOnDemand: @Component;
    
    private Random CbatDataOnDemand.rnd = new SecureRandom();
    
    private List<Cbat> CbatDataOnDemand.data;
    
    @Autowired
    private CbatinfoDataOnDemand CbatDataOnDemand.cbatinfoDataOnDemand;
    
    @Autowired
    CbatService CbatDataOnDemand.cbatService;
    
    @Autowired
    CbatRepository CbatDataOnDemand.cbatRepository;
    
    public Cbat CbatDataOnDemand.getNewTransientCbat(int index) {
        Cbat obj = new Cbat();
        setActive(obj, index);
        setCbatinfo(obj, index);
        setDeviceType(obj, index);
        setIp(obj, index);
        setLabel(obj, index);
        setMac(obj, index);
        return obj;
    }
    
    public void CbatDataOnDemand.setActive(Cbat obj, int index) {
        Boolean active = Boolean.TRUE;
        obj.setActive(active);
    }
    
    public void CbatDataOnDemand.setCbatinfo(Cbat obj, int index) {
        Cbatinfo cbatinfo = cbatinfoDataOnDemand.getSpecificCbatinfo(index);
        obj.setCbatinfo(cbatinfo);
    }
    
    public void CbatDataOnDemand.setDeviceType(Cbat obj, int index) {
        EocDeviceType deviceType = EocDeviceType.class.getEnumConstants()[0];
        obj.setDeviceType(deviceType);
    }
    
    public void CbatDataOnDemand.setIp(Cbat obj, int index) {
        String ip = "ip_" + index;
        obj.setIp(ip);
    }
    
    public void CbatDataOnDemand.setLabel(Cbat obj, int index) {
        String label = "label_" + index;
        obj.setLabel(label);
    }
    
    public void CbatDataOnDemand.setMac(Cbat obj, int index) {
        String mac = "mac_" + index;
        obj.setMac(mac);
    }
    
    public Cbat CbatDataOnDemand.getSpecificCbat(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Cbat obj = data.get(index);
        Long id = obj.getId();
        return cbatService.findCbat(id);
    }
    
    public Cbat CbatDataOnDemand.getRandomCbat() {
        init();
        Cbat obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return cbatService.findCbat(id);
    }
    
    public boolean CbatDataOnDemand.modifyCbat(Cbat obj) {
        return false;
    }
    
    public void CbatDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = cbatService.findCbatEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Cbat' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Cbat>();
        for (int i = 0; i < 10; i++) {
            Cbat obj = getNewTransientCbat(i);
            try {
                cbatService.saveCbat(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            cbatRepository.flush();
            data.add(obj);
        }
    }
    
}
