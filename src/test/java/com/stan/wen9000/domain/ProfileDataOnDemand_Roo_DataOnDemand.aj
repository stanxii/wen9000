// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stan.wen9000.domain;

import com.stan.wen9000.domain.Profile;
import com.stan.wen9000.domain.ProfileDataOnDemand;
import com.stan.wen9000.domain.ProfileRepository;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ProfileDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProfileDataOnDemand: @Component;
    
    private Random ProfileDataOnDemand.rnd = new SecureRandom();
    
    private List<Profile> ProfileDataOnDemand.data;
    
    @Autowired
    ProfileRepository ProfileDataOnDemand.profileRepository;
    
    public Profile ProfileDataOnDemand.getNewTransientProfile(int index) {
        Profile obj = new Profile();
        setPort1enable(obj, index);
        setPort1rxrate(obj, index);
        setPort1txrate(obj, index);
        setPort1vid(obj, index);
        setPort2enable(obj, index);
        setPort2rxrate(obj, index);
        setPort2txrate(obj, index);
        setPort2vid(obj, index);
        setPort3enable(obj, index);
        setPort3rxrate(obj, index);
        setPort3txrate(obj, index);
        setPort3vid(obj, index);
        setPort0enable(obj, index);
        setPort0rxrate(obj, index);
        setPort0txrate(obj, index);
        setPort0vid(obj, index);
        setProfilename(obj, index);
        setRxlimitsts(obj, index);
        setTxlimitsts(obj, index);
        setVlanenable(obj, index);
        return obj;
    }
    
    public void ProfileDataOnDemand.setPort1enable(Profile obj, int index) {
        Boolean port1enable = Boolean.TRUE;
        obj.setPort1enable(port1enable);
    }
    
    public void ProfileDataOnDemand.setPort1rxrate(Profile obj, int index) {
        Integer port1rxrate = new Integer(index);
        obj.setPort1rxrate(port1rxrate);
    }
    
    public void ProfileDataOnDemand.setPort1txrate(Profile obj, int index) {
        Integer port1txrate = new Integer(index);
        obj.setPort1txrate(port1txrate);
    }
    
    public void ProfileDataOnDemand.setPort1vid(Profile obj, int index) {
        Integer port1vid = new Integer(index);
        obj.setPort1vid(port1vid);
    }
    
    public void ProfileDataOnDemand.setPort2enable(Profile obj, int index) {
        Boolean port2enable = Boolean.TRUE;
        obj.setPort2enable(port2enable);
    }
    
    public void ProfileDataOnDemand.setPort2rxrate(Profile obj, int index) {
        Integer port2rxrate = new Integer(index);
        obj.setPort2rxrate(port2rxrate);
    }
    
    public void ProfileDataOnDemand.setPort2txrate(Profile obj, int index) {
        Integer port2txrate = new Integer(index);
        obj.setPort2txrate(port2txrate);
    }
    
    public void ProfileDataOnDemand.setPort2vid(Profile obj, int index) {
        Integer port2vid = new Integer(index);
        obj.setPort2vid(port2vid);
    }
    
    public void ProfileDataOnDemand.setPort3enable(Profile obj, int index) {
        Boolean port3enable = Boolean.TRUE;
        obj.setPort3enable(port3enable);
    }
    
    public void ProfileDataOnDemand.setPort3rxrate(Profile obj, int index) {
        Integer port3rxrate = new Integer(index);
        obj.setPort3rxrate(port3rxrate);
    }
    
    public void ProfileDataOnDemand.setPort3txrate(Profile obj, int index) {
        Integer port3txrate = new Integer(index);
        obj.setPort3txrate(port3txrate);
    }
    
    public void ProfileDataOnDemand.setPort3vid(Profile obj, int index) {
        Integer port3vid = new Integer(index);
        obj.setPort3vid(port3vid);
    }
    
    public void ProfileDataOnDemand.setPort0enable(Profile obj, int index) {
        Boolean port0enable = Boolean.TRUE;
        obj.setPort0enable(port0enable);
    }
    
    public void ProfileDataOnDemand.setPort0rxrate(Profile obj, int index) {
        Integer port0rxrate = new Integer(index);
        obj.setPort0rxrate(port0rxrate);
    }
    
    public void ProfileDataOnDemand.setPort0txrate(Profile obj, int index) {
        Integer port0txrate = new Integer(index);
        obj.setPort0txrate(port0txrate);
    }
    
    public void ProfileDataOnDemand.setPort0vid(Profile obj, int index) {
        Integer port0vid = new Integer(index);
        obj.setPort0vid(port0vid);
    }
    
    public void ProfileDataOnDemand.setProfilename(Profile obj, int index) {
        String profilename = "profilename_" + index;
        obj.setProfilename(profilename);
    }
    
    public void ProfileDataOnDemand.setRxlimitsts(Profile obj, int index) {
        Boolean rxlimitsts = Boolean.TRUE;
        obj.setRxlimitsts(rxlimitsts);
    }
    
    public void ProfileDataOnDemand.setTxlimitsts(Profile obj, int index) {
        Boolean txlimitsts = Boolean.TRUE;
        obj.setTxlimitsts(txlimitsts);
    }
    
    public void ProfileDataOnDemand.setVlanenable(Profile obj, int index) {
        Boolean vlanenable = Boolean.TRUE;
        obj.setVlanenable(vlanenable);
    }
    
    public Profile ProfileDataOnDemand.getSpecificProfile(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Profile obj = data.get(index);
        Long id = obj.getId();
        return profileRepository.findOne(id);
    }
    
    public Profile ProfileDataOnDemand.getRandomProfile() {
        init();
        Profile obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return profileRepository.findOne(id);
    }
    
    public boolean ProfileDataOnDemand.modifyProfile(Profile obj) {
        return false;
    }
    
    public void ProfileDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = profileRepository.findAll(new org.springframework.data.domain.PageRequest(from / to, to)).getContent();
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Profile' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Profile>();
        for (int i = 0; i < 10; i++) {
            Profile obj = getNewTransientProfile(i);
            try {
                profileRepository.save(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            profileRepository.flush();
            data.add(obj);
        }
    }
    
}
