// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.stan.wen9000.web;

import com.stan.wen9000.domain.Hfc;
import com.stan.wen9000.reference.HfcClass;
import com.stan.wen9000.reference.HfcDeviceType;
import com.stan.wen9000.service.HfcService;
import com.stan.wen9000.web.HfcController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect HfcController_Roo_Controller {
    
    @Autowired
    HfcService HfcController.hfcService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String HfcController.create(@Valid Hfc hfc, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, hfc);
            return "hfcs/create";
        }
        uiModel.asMap().clear();
        hfcService.saveHfc(hfc);
        return "redirect:/hfcs/" + encodeUrlPathSegment(hfc.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String HfcController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Hfc());
        return "hfcs/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String HfcController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("hfc", hfcService.findHfc(id));
        uiModel.addAttribute("itemId", id);
        return "hfcs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String HfcController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("hfcs", hfcService.findHfcEntries(firstResult, sizeNo));
            float nrOfPages = (float) hfcService.countAllHfcs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("hfcs", hfcService.findAllHfcs());
        }
        return "hfcs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String HfcController.update(@Valid Hfc hfc, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, hfc);
            return "hfcs/update";
        }
        uiModel.asMap().clear();
        hfcService.updateHfc(hfc);
        return "redirect:/hfcs/" + encodeUrlPathSegment(hfc.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String HfcController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, hfcService.findHfc(id));
        return "hfcs/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String HfcController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Hfc hfc = hfcService.findHfc(id);
        hfcService.deleteHfc(hfc);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/hfcs";
    }
    
    void HfcController.populateEditForm(Model uiModel, Hfc hfc) {
        uiModel.addAttribute("hfc", hfc);
        uiModel.addAttribute("hfcclasses", Arrays.asList(HfcClass.values()));
        uiModel.addAttribute("hfcdevicetypes", Arrays.asList(HfcDeviceType.values()));
    }
    
    String HfcController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
